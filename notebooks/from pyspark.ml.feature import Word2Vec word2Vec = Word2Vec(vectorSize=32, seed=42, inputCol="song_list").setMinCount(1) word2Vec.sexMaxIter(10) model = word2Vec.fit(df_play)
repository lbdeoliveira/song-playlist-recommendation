{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "1486d0e1-a287-4fdc-99cf-6ff3e2e6aab8",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Name: Chandrish <br>\n",
    "Analysis Goal: Training a song embedding based on playlists data and show recommendations of songs. <br>\n",
    "Algorithm/ Function used: Word2Vec MLLib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "ccaa518d-dc0f-4bbe-b5b8-a286258ed644",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Libraries\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import *\n",
    "from pyspark.sql.types import *\n",
    "from pyspark.sql.window import Window\n",
    "from datetime import datetime\n",
    "from pyspark.ml.feature import HashingTF, IDF, Tokenizer, CountVectorizer\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.types import *\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "0ca56a42-9087-416c-900d-795dfe76a87f",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creating spark session\n",
    "spark = SparkSession.builder.\\\n",
    "                    appName(\"spotify\").\\\n",
    "                    config(\"spark.jars.packages\", \"org.mongodb.spark:mongo-spark-connector_2.12:3.0.1\").\\\n",
    "                    config(\"spark.mongodb.input.uri\", \"mongodb+srv://**********\").\\\n",
    "                    config(\"spark.mongodb.output.uri\", \"mongodb+srv://**********\").\\\n",
    "                    config(\"spark.network.timeout\", \"7200s\").\\\n",
    "                    config(\"spark.executor.heartbeatInterval\", \"1200s\").\\\n",
    "                    getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "edc9424f-609e-4471-9024-8336c7609e33",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# connection string for mongodb\n",
    "database = '*****'\n",
    "collection = 'songs_lyrics'\n",
    "user_name = '*****'\n",
    "password = '*****'\n",
    "address = '**********.mongodb.net'\n",
    "connection_string = f\"mongodb+srv://{user_name}:{password}@{address}/{database}.{collection}\"\n",
    "connection_string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "36f7144a-0426-4732-bbaa-2092a6c62839",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Reading playlist data from MongoDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "1dc41482-acc5-44e1-8cd0-ee54197f3713",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# reading the data from Mongodb\n",
    "df = spark.read.format('mongo').option(\"uri\",connection_string).load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "55bd87c7-5105-44f4-89b4-72a2ae312304",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">Out[5]: DataFrame[pid: bigint, song_list: array&lt;string&gt;]</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">Out[5]: DataFrame[pid: bigint, song_list: array&lt;string&gt;]</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# grouping playlist to create array of songs\n",
    "df_play = df.groupBy('pid').agg(collect_list('track_uri').alias('song_list'))\n",
    "df_play.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "8744e0a7-f9de-40ba-9bc3-18f97e480e39",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">+----+--------------------+\n",
       " pid|           song_list|\n",
       "+----+--------------------+\n",
       "  26|[spotify:track:2J...|\n",
       "  29|[spotify:track:1O...|\n",
       " 474|[spotify:track:1R...|\n",
       " 964|[spotify:track:2b...|\n",
       "1677|[spotify:track:3l...|\n",
       "+----+--------------------+\n",
       "only showing top 5 rows\n",
       "\n",
       "</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">+----+--------------------+\n| pid|           song_list|\n+----+--------------------+\n|  26|[spotify:track:2J...|\n|  29|[spotify:track:1O...|\n| 474|[spotify:track:1R...|\n| 964|[spotify:track:2b...|\n|1677|[spotify:track:3l...|\n+----+--------------------+\nonly showing top 5 rows\n\n</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_play.show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "a28a666e-1e10-406b-889f-dad9ed45132f",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Word2Vec training, with default parameters for window size and other parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "4568a5f6-8138-476a-8142-490f465b0f68",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.ml.feature import Word2Vec\n",
    "word2Vec = Word2Vec(vectorSize=32, seed=42, inputCol=\"song_list\").setMinCount(1)\n",
    "word2Vec.setMaxIter(10)\n",
    "model = word2Vec.fit(df_play)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "0cdaa9cb-1273-4c2e-8a7a-a577744c6da8",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Model Execution time: 8.42 hours for 1 million playlists for 10 iterations <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "4b879b6a-9997-4264-acf9-92545a65708c",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# s3 credentials to connect\n",
    "ACCESS_KEY = \"*****\"\n",
    "SECRET_KEY = \"*****\"\n",
    "spark._jsc.hadoopConfiguration().set(\"spark.jars.packages\", \"org.apache.hadoop:hadoop-aws:3.3.1\")\n",
    "spark._jsc.hadoopConfiguration().set(\"spark.hadoop.fs.s3a.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\")\n",
    "spark._jsc.hadoopConfiguration().set(\"fs.s3a.access.key\", ACCESS_KEY)\n",
    "spark._jsc.hadoopConfiguration().set(\"fs.s3a.secret.key\", SECRET_KEY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "38dea2f2-c514-4b83-9915-98666d7911bb",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">/databricks/spark/python/pyspark/sql/context.py:134: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
       "  warnings.warn(\n",
       "+--------------------+--------------------+\n",
       "           track_uri|              vector|\n",
       "+--------------------+--------------------+\n",
       "spotify:track:7Bw...|[0.17075945436954...|\n",
       "spotify:track:3QV...|[-0.1242264881730...|\n",
       "spotify:track:2wf...|[-0.1510251611471...|\n",
       "spotify:track:7KX...|[-0.0403408631682...|\n",
       "spotify:track:23Q...|[-0.5807483792304...|\n",
       "spotify:track:2gw...|[0.00845383573323...|\n",
       "spotify:track:3dC...|[-0.1968882828950...|\n",
       "spotify:track:1i3...|[-0.0056284335441...|\n",
       "spotify:track:3EK...|[-0.4708164334297...|\n",
       "spotify:track:59q...|[-0.1429600268602...|\n",
       "+--------------------+--------------------+\n",
       "only showing top 10 rows\n",
       "\n",
       "</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">/databricks/spark/python/pyspark/sql/context.py:134: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n  warnings.warn(\n+--------------------+--------------------+\n|           track_uri|              vector|\n+--------------------+--------------------+\n|spotify:track:7Bw...|[0.17075945436954...|\n|spotify:track:3QV...|[-0.1242264881730...|\n|spotify:track:2wf...|[-0.1510251611471...|\n|spotify:track:7KX...|[-0.0403408631682...|\n|spotify:track:23Q...|[-0.5807483792304...|\n|spotify:track:2gw...|[0.00845383573323...|\n|spotify:track:3dC...|[-0.1968882828950...|\n|spotify:track:1i3...|[-0.0056284335441...|\n|spotify:track:3EK...|[-0.4708164334297...|\n|spotify:track:59q...|[-0.1429600268602...|\n+--------------------+--------------------+\nonly showing top 10 rows\n\n</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# renaming the model output\n",
    "vectors = model.getVectors().withColumnRenamed('word', 'track_uri')\n",
    "vectors.cache()\n",
    "vectors.show(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "89b65ad3-bd8a-4cc3-b5dd-1566283fcfbb",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "We wrote the output initially to S3 because we were concerned about the MongoDB charges, and wanted to save the trained model weights because this takes long time to train."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "8ef7d49d-8098-486b-bf03-07254e928a86",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# writing the model output to s3\n",
    "vectors.repartition(1).write.json('s3://spotify-recommendation/song_embedding_word2vec/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "b7e580ee-605d-43be-ae33-336f8a2deff8",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Reading the trained vectors from S3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "0290c109-af35-4b25-ae1a-800ccad72990",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">+--------------------+--------------------+\n",
       "           track_uri|              values|\n",
       "+--------------------+--------------------+\n",
       "spotify:track:7Bw...|[0.17075945436954...|\n",
       "spotify:track:3QV...|[-0.1242264881730...|\n",
       "spotify:track:2wf...|[-0.1510251611471...|\n",
       "spotify:track:7KX...|[-0.0403408631682...|\n",
       "spotify:track:23Q...|[-0.5807483792304...|\n",
       "+--------------------+--------------------+\n",
       "only showing top 5 rows\n",
       "\n",
       "</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">+--------------------+--------------------+\n|           track_uri|              values|\n+--------------------+--------------------+\n|spotify:track:7Bw...|[0.17075945436954...|\n|spotify:track:3QV...|[-0.1242264881730...|\n|spotify:track:2wf...|[-0.1510251611471...|\n|spotify:track:7KX...|[-0.0403408631682...|\n|spotify:track:23Q...|[-0.5807483792304...|\n+--------------------+--------------------+\nonly showing top 5 rows\n\n</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "song_embed_file = 's3://spotify-recommendation/song_embedding_word2vec/part-00000-tid-4058272997583498648-4f4c2eac-f7e1-4c42-90d8-10098e466450-44807-1-c000.json'\n",
    "df_song_embed = spark.read.json(song_embed_file)\n",
    "df_song_embed.cache()\n",
    "df_song_embed.select('track_uri', 'vector.values').show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "02a5f4e9-1e28-4d49-bba4-45f367349b39",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Save track, vector pairs in mongodb\n",
    "collection = 'song_vectors'\n",
    "connection_string = f\"mongodb+srv://{user_name}:{password}@{address}/{database}.{collection}\"\n",
    "df_song_embed.select('track_uri', 'vector.values').write.format(\"mongo\").option(\"uri\", connection_string).mode(\"append\").save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "aecc5696-630f-4730-a1fd-6249ec8b8476",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\"></div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# reading back from mongodb to check\n",
    "collection = 'song_vectors'\n",
    "connection_string = f\"mongodb+srv://{user_name}:{password}@{address}/{database}.{collection}\"\n",
    "df_song_embed = spark.read.format('mongo').option(\"uri\",connection_string).load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "cb354b89-fe6b-409f-9724-dfcb8d166851",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">Out[13]: 2262292</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">Out[13]: 2262292</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_song_embed_mongo.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "497d884e-aa77-4f94-a36b-ca59baf8687e",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">Out[14]: 2262292</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">Out[14]: 2262292</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_song_embed.cache()\n",
    "df_song_embed.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "de4af047-7122-492f-805f-9ce0ad357b3f",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Both the counts match!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "a8de1dd8-f101-4e08-a5d2-21b255f63c5a",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Now, the song embeddings dataframe has just track_uri and song vector. We will join with the playlist dataframe to bring in song information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "7c517e0a-1a3e-4a9b-a506-765b9fce6158",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Creating a track info data frame for each track with columns, Track URI, Track Name, Album Name, Artist Name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "b52f4a32-9c0e-4be3-9695-b55ffec73e03",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">+--------------------+--------------------+-------------+--------------+---------+\n",
       "           track_uri|          track_name|   album_name|   artist_name|pid_count|\n",
       "+--------------------+--------------------+-------------+--------------+---------+\n",
       "spotify:track:7KX...|             HUMBLE.|        DAMN.|Kendrick Lamar|    93148|\n",
       "spotify:track:7yy...|Broccoli (feat. L...|Big Baby DRAM|          DRAM|    82618|\n",
       "spotify:track:3a1...|     Congratulations|       Stoney|   Post Malone|    79974|\n",
       "spotify:track:4Km...|Bad and Boujee (f...|      Culture|         Migos|    69998|\n",
       "spotify:track:0SG...|         Bounce Back|   I Decided.|      Big Sean|    67398|\n",
       "+--------------------+--------------------+-------------+--------------+---------+\n",
       "only showing top 5 rows\n",
       "\n",
       "</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">+--------------------+--------------------+-------------+--------------+---------+\n|           track_uri|          track_name|   album_name|   artist_name|pid_count|\n+--------------------+--------------------+-------------+--------------+---------+\n|spotify:track:7KX...|             HUMBLE.|        DAMN.|Kendrick Lamar|    93148|\n|spotify:track:7yy...|Broccoli (feat. L...|Big Baby DRAM|          DRAM|    82618|\n|spotify:track:3a1...|     Congratulations|       Stoney|   Post Malone|    79974|\n|spotify:track:4Km...|Bad and Boujee (f...|      Culture|         Migos|    69998|\n|spotify:track:0SG...|         Bounce Back|   I Decided.|      Big Sean|    67398|\n+--------------------+--------------------+-------------+--------------+---------+\nonly showing top 5 rows\n\n</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_track_info = df.groupBy('track_uri', 'track_name', 'album_name', 'artist_name').agg(count('pid').alias('pid_count')).sort('pid_count', ascending = False)\n",
    "df_track_info.cache()\n",
    "df_track_info.show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "393b7935-be8e-46a0-a512-5336e494b092",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "Joining this track information with song embeddings dataframe on track_uri.<br>\n",
    "We are restricting the songs to top 100k based on number of playlist they occur in, because the tensor projector which we will use to visualize these embeddings doesn't work well with 2million song embeddings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "56ca198a-afa5-4308-ba65-ad7691dc2e42",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .ansiout {\n",
       "    display: block;\n",
       "    unicode-bidi: embed;\n",
       "    white-space: pre-wrap;\n",
       "    word-wrap: break-word;\n",
       "    word-break: break-all;\n",
       "    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n",
       "    font-size: 13px;\n",
       "    color: #555;\n",
       "    margin-left: 4px;\n",
       "    line-height: 19px;\n",
       "  }\n",
       "</style>\n",
       "<div class=\"ansiout\">+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\n",
       "           track_uri|          track_name|          album_name|artist_name|pid_count|                 _id|              values|\n",
       "+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\n",
       "spotify:track:0sE...|            Kolniður|                  Go|      Jónsi|       58|{622bc2b268528929...|[-0.1272485405206...|\n",
       "spotify:track:22D...|       What You Want|     Live from Trona| Toro y Moi|       19|{622bc2c87d21b373...|[0.03801601380109...|\n",
       "spotify:track:2Xg...|Emergency Spliff ...|    Emergency Spliff| SkillinJah|       99|{622bc29368528929...|[-0.0745467990636...|\n",
       "spotify:track:3ru...|    Go with the Flow|Finding Nemo: The...|     Marlin|       24|{622bc2cf7d21b373...|[0.23135676980018...|\n",
       "spotify:track:3v8...|    Can&#39;t Forget You|          Ammunition|   Krewella|       35|{622bc29397052242...|[-0.1594378501176...|\n",
       "+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\n",
       "only showing top 5 rows\n",
       "\n",
       "</div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "data": "<div class=\"ansiout\">+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\n|           track_uri|          track_name|          album_name|artist_name|pid_count|                 _id|              values|\n+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\n|spotify:track:0sE...|            Kolniður|                  Go|      Jónsi|       58|{622bc2b268528929...|[-0.1272485405206...|\n|spotify:track:22D...|       What You Want|     Live from Trona| Toro y Moi|       19|{622bc2c87d21b373...|[0.03801601380109...|\n|spotify:track:2Xg...|Emergency Spliff ...|    Emergency Spliff| SkillinJah|       99|{622bc29368528929...|[-0.0745467990636...|\n|spotify:track:3ru...|    Go with the Flow|Finding Nemo: The...|     Marlin|       24|{622bc2cf7d21b373...|[0.23135676980018...|\n|spotify:track:3v8...|    Can&#39;t Forget You|          Ammunition|   Krewella|       35|{622bc29397052242...|[-0.1594378501176...|\n+--------------------+--------------------+--------------------+-----------+---------+--------------------+--------------------+\nonly showing top 5 rows\n\n</div>",
       "datasetInfos": [],
       "metadata": {},
       "removedWidgets": [],
       "type": "html"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_joined = df_track_info.limit(100000).join(df_song_embed, 'track_uri', 'left')\n",
    "df_joined.show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "inputWidgets": {},
     "nuid": "657ec272-7b34-4837-a476-6a0fb2a54fa7",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "The next steps are: <br>\n",
    "1. Exporting this file into a tsv format\n",
    "2. Upload it to the tensorprojector.org\n",
    "3. Visualize the embeddings"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "dashboards": [],
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4
   },
   "notebookName": "Chandrish",
   "notebookOrigID": 548855102382700,
   "widgets": {}
  },
  "kernelspec": {
   "display_name": "",
   "name": ""
  },
  "language_info": {
   "name": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
